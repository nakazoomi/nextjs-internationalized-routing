"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
function templateWithLoader(rawCode, _a) {
    var _b = _a === void 0 ? {} : _a, page = _b.page, typescript = _b.typescript, loader = _b.loader, hasLoader = _b.hasLoader, _c = _b.hasLoadLocaleFrom, hasLoadLocaleFrom = _c === void 0 ? false : _c;
    var tokenToReplace = "__CODE_TOKEN_" + Date.now().toString(16) + "__";
    var configFile = process.cwd() + '/i18n';
    var modifiedCode = rawCode;
    if (hasLoader) {
        modifiedCode = modifiedCode
            .replace(new RegExp("(const|var|let|async +function|function|import|import {.* as) +" + loader + "\\W"), function (v) {
            return v.replace(new RegExp("\\W" + loader + "\\W"), function (r) {
                return r.replace(loader, '_' + loader);
            });
        })
            .replace(new RegExp("export +(const|var|let|async +function|function) +_" + loader), function (v) { return v.replace('export', ''); })
            .replace(/export +\{ *(getStaticProps|getServerSideProps)( |,)*\}/, '')
            .replace(new RegExp("^ *export {(.|\n)*" + loader + "(.|\n)*}", 'gm'), function (v) {
            return v
                .replace(new RegExp("(\\w+ +as +)?" + loader + "\\W", 'gm'), function (v) {
                return v.endsWith(loader) ? '' : v[v.length - 1];
            })
                .replace(/,( |\n)*,/gm, ',')
                .replace(/{( |\n)*,/gm, '{')
                .replace(/{,( \n)*}/gm, '}')
                .replace(/^ *export +{( |\n)*}\W*$/gm, '');
        })
            .replace(/^ *import +{( |\n)*[^}]*/gm, function (v) {
            if (v.match(new RegExp("\\W+" + loader + " +as ")))
                return v;
            return v.replace(new RegExp("\\W+" + loader + "(\\W|$)"), function (r) {
                return r.replace(loader, loader + " as _" + loader);
            });
        });
    }
    var template = "\n    import __i18nConfig from '" + configFile + "'\n    import __loadNamespaces from 'next-translate/loadNamespaces'\n    " + tokenToReplace + "\n    export async function " + loader + "(ctx) {\n        " + (hasLoader ? "let res = _" + loader + "(ctx)" : '') + "\n        " + (hasLoader ? "if(typeof res.then === 'function') res = await res" : '') + "\n        return {\n          " + (hasLoader ? '...res,' : '') + "\n          props: {\n            " + (hasLoader ? '...(res.props || {}),' : '') + "\n            ...(await __loadNamespaces({\n              ...ctx,\n              pathname: '" + page + "',\n              loaderName: '" + loader + "',\n              ...__i18nConfig,\n              " + utils_1.overwriteLoadLocales(hasLoadLocaleFrom) + "\n            }))\n          }\n        }\n    }\n  ";
    if (typescript)
        template = template.replace(/\n/g, '\n// @ts-ignore\n');
    return template.replace(tokenToReplace, "\n" + modifiedCode + "\n");
}
exports.default = templateWithLoader;
