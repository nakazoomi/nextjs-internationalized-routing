var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { createContext, useContext } from 'react';
import { useRouter } from 'next/router';
import I18nContext from './_context';
import useTranslation from './useTranslation';
var NsContext = createContext({});
function getDicValue(dic, key, options) {
    if (key === void 0) { key = ''; }
    if (options === void 0) { options = {
        returnObjects: false,
    }; }
    var value = key
        .split('.')
        .reduce(function (val, key) { return val[key] || {}; }, dic);
    if (typeof value === 'string' ||
        (value instanceof Object && options.returnObjects)) {
        return value;
    }
}
function plural(pluralRules, dic, key, query) {
    if (!query || typeof query.count !== 'number')
        return key;
    var numKey = key + "_" + query.count;
    if (getDicValue(dic, numKey) !== undefined)
        return numKey;
    var pluralKey = key + "_" + pluralRules.select(query.count);
    if (query.count > 1 && getDicValue(dic, pluralKey) !== undefined) {
        return pluralKey;
    }
    return key;
}
function interpolation(text, query) {
    if (!text || !query)
        return text || '';
    return Object.keys(query).reduce(function (all, varKey) {
        var regex = new RegExp("{{\\s*" + varKey + "\\s*}}", 'gm');
        all = all.replace(regex, "" + query[varKey]);
        return all;
    }, text);
}
function objectInterpolation(obj, query) {
    if (!query || Object.keys(query).length === 0)
        return obj;
    Object.keys(obj).forEach(function (key) {
        if (obj[key] instanceof Object)
            objectInterpolation(obj[key], query);
        if (typeof obj[key] === 'string')
            obj[key] = interpolation(obj[key], query);
    });
    return obj;
}
function missingKeyLogger(_a) {
    var namespace = _a.namespace, i18nKey = _a.i18nKey;
    if (process.env.NODE_ENV === 'production')
        return;
    if (!i18nKey) {
        console.warn("[next-translate] The text \"" + namespace + "\" has no namespace in front of it.");
        return;
    }
    console.warn("[next-translate] \"" + namespace + ":" + i18nKey + "\" is missing in current namespace configuration. Try adding \"" + i18nKey + "\" to the namespace \"" + namespace + "\".");
}
export default function I18nProvider(_a) {
    var lng = _a.lang, _b = _a.namespaces, namespaces = _b === void 0 ? {} : _b, children = _a.children, _c = _a.logger, logger = _c === void 0 ? missingKeyLogger : _c, _d = _a.loadLocaleFrom, loadLocaleFrom = _d === void 0 ? function () { return Promise.resolve({}); } : _d;
    var parentLang = useTranslation().lang;
    var _e = useRouter() || {}, locale = _e.locale, defaultLocale = _e.defaultLocale;
    var lang = lng || parentLang || locale || defaultLocale || '';
    var ns = useContext(NsContext);
    var allNamespaces = __assign(__assign({}, ns), namespaces);
    var pluralRules = new Intl.PluralRules(lang);
    function t(key, query, options) {
        if (key === void 0) { key = ''; }
        var k = Array.isArray(key) ? key[0] : key;
        var _a = k.split(/:(.+)/), namespace = _a[0], i18nKey = _a[1];
        var dic = allNamespaces[namespace] || {};
        var keyWithPlural = plural(pluralRules, dic, i18nKey, query);
        var value = getDicValue(dic, keyWithPlural, options);
        var empty = typeof value === 'undefined' ||
            (typeof value === 'object' && !Object.keys(value).length);
        var fallbacks = typeof (options === null || options === void 0 ? void 0 : options.fallback) === 'string'
            ? [options.fallback]
            : (options === null || options === void 0 ? void 0 : options.fallback) || [];
        if (typeof window !== 'undefined' && empty) {
            logger({ namespace: namespace, i18nKey: i18nKey });
        }
        if (empty && Array.isArray(fallbacks) && fallbacks.length) {
            var firstFallback = fallbacks[0], restFallbacks = fallbacks.slice(1);
            if (typeof firstFallback === 'string') {
                return t(firstFallback, query, __assign(__assign({}, options), { fallback: restFallbacks }));
            }
        }
        if (value instanceof Object) {
            return objectInterpolation(value, query);
        }
        return interpolation(value, query) || k;
    }
    return (React.createElement(I18nContext.Provider, { value: { lang: lang, t: t, loadLocaleFrom: loadLocaleFrom } },
        React.createElement(NsContext.Provider, { value: allNamespaces }, children)));
}
