import { clearCommentsRgx, overwriteLoadLocales } from './utils';
export default function templateWithHoc(code, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.skipInitialProps, skipInitialProps = _c === void 0 ? false : _c, typescript = _b.typescript, _d = _b.pageName, pageName = _d === void 0 ? '__Page_Next_Translate__' : _d, _e = _b.hasLoadLocaleFrom, hasLoadLocaleFrom = _e === void 0 ? false : _e;
    var tokenToReplace = "__CODE_TOKEN_" + Date.now().toString(16) + "__";
    var codeWithoutComments = code.replace(clearCommentsRgx, '');
    var modifiedCode = code.replace(/export +default/g, "const " + pageName + " =");
    var _f = codeWithoutComments.match(/export +default +(function|class) +([A-Z]\w*)/) || [], componentName = _f[2];
    if (componentName) {
        modifiedCode = modifiedCode.replace(new RegExp("\\W" + componentName + "\\.getInitialProps", 'g'), pageName + ".getInitialProps");
    }
    var template = "\n    import __i18nConfig from '" + (process.cwd() + '/i18n') + "'\n    import __appWithI18n from 'next-translate/appWithI18n'\n    " + tokenToReplace + "\n    export default __appWithI18n(__Page_Next_Translate__, {\n      ...__i18nConfig,\n      isLoader: true,\n      skipInitialProps: " + skipInitialProps + ",\n      " + overwriteLoadLocales(hasLoadLocaleFrom) + "\n    });\n  ";
    if (typescript)
        template = template.replace(/\n/g, '\n// @ts-ignore\n');
    return template.replace(tokenToReplace, "\n" + modifiedCode + "\n");
}
