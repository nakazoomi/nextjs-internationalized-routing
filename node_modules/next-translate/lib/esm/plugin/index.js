var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { hasHOC } from './utils';
export default function nextTranslate(nextConfig) {
    if (nextConfig === void 0) { nextConfig = {}; }
    var fs = require('fs');
    var test = /\.(tsx|ts|js|mjs|jsx)$/;
    var arePagesInsideSrc = fs.existsSync(process.cwd() + '/src/pages');
    var file = '/i18n.js';
    if (!fs.existsSync(process.cwd() + file))
        file = '/i18n.json';
    if (!fs.existsSync(process.cwd() + file)) {
        console.error('ðŸš¨ [next-translate] You should provide the next-translate config inside i18n.js / i18n.json root file.');
        return nextConfig;
    }
    var i18n = nextConfig.i18n || {};
    var _a = require(process.cwd() + file), locales = _a.locales, defaultLocale = _a.defaultLocale, _b = _a.loader, loader = _b === void 0 ? true : _b, pages = _a.pages, logger = _a.logger, restI18n = __rest(_a, ["locales", "defaultLocale", "loader", "pages", "logger"]);
    var migrationLink = 'https://github.com/vinissimus/next-translate/releases/tag/1.0.0';
    if (restI18n.currentPagesDir) {
        console.warn("\uD83D\uDEA8 [next-translate] \"currentPagesDir\" is no longer necessary, you can just remove it. Learn more on " + migrationLink);
    }
    if (restI18n.finalPagesDir) {
        console.warn("\uD83D\uDEA8 [next-translate] \"finalPagesDir\" is no longer necessary, you can just remove it. Learn more on " + migrationLink);
    }
    if (restI18n.localesPath) {
        console.warn("\uD83D\uDEA8 [next-translate] \"localesPath\" is no longer supported, you should replace it to \"loadLocaleFrom\". Learn more on " + migrationLink);
    }
    if (restI18n.package !== undefined) {
        console.warn("\uD83D\uDEA8 [next-translate] \"package\" is no longer supported, you should replace it to \"loadLocaleFrom\". Learn more on " + migrationLink);
    }
    var hasGetInitialPropsOnAppJs = false;
    var pagesPath = process.cwd() + (arePagesInsideSrc ? '/src/pages' : '/pages');
    var app = fs.readdirSync(pagesPath).find(function (page) { return page.startsWith('_app.'); });
    if (app) {
        var code = fs.readFileSync(pagesPath + "/" + app).toString('UTF-8');
        hasGetInitialPropsOnAppJs =
            !!code.match(/\WgetInitialProps\W/g) || hasHOC(code);
    }
    return __assign(__assign({}, nextConfig), { i18n: __assign(__assign(__assign({}, i18n), restI18n), { locales: locales,
            defaultLocale: defaultLocale }), webpack: function (conf, options) {
            var config = typeof nextConfig.webpack === 'function'
                ? nextConfig.webpack(conf, options)
                : conf;
            if (!loader)
                return config;
            config.module.rules.push({
                test: test,
                use: {
                    loader: 'next-translate/plugin/loader',
                    options: {
                        extensionsRgx: test,
                        hasGetInitialPropsOnAppJs: hasGetInitialPropsOnAppJs,
                        pagesPath: pagesPath + '/',
                        hasLoadLocaleFrom: typeof restI18n.loadLocaleFrom === 'function',
                    },
                },
            });
            return config;
        } });
}
