var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { useContext } from 'react';
import I18nContext from './_context';
export default function useTranslation(defaultNs) {
    var ctx = useContext(I18nContext);
    if (typeof defaultNs !== 'string')
        return ctx;
    function t(key, query, options) {
        if (key === void 0) { key = ''; }
        var k = Array.isArray(key) ? key[0] : key;
        if (!k.includes(':'))
            k = defaultNs + ":" + k;
        return ctx.t(k, query, options);
    }
    return __assign(__assign({}, ctx), { t: t });
}
